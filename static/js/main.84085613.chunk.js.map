{"version":3,"sources":["components/Timer.jsx","App.jsx","index.jsx"],"names":["Timer","time","step","autostart","onTick","onTimeEnd","onTimeStart","onTimePause","useState","toFixed","minutes","setMinutes","seconds","setSeconds","stop","setStop","useEffect","myInterval","setInterval","clearInterval","className","onClick","App","console","log","ReactDOM","render","document","getElementById"],"mappings":"uLAgDeA,EA3CD,SAAC,GAA0E,IAAzEC,EAAwE,EAAxEA,KAAMC,EAAkE,EAAlEA,KAAMC,EAA4D,EAA5DA,UAAWC,EAAiD,EAAjDA,OAAQC,EAAyC,EAAzCA,UAAWC,EAA8B,EAA9BA,YAAaC,EAAiB,EAAjBA,YACnE,EAA4BC,qBAAWP,EAAO,IAAO,IAAIQ,WAAzD,mBAAKC,EAAL,KAAcC,EAAd,KACA,EAA4BH,qBAAWP,EAAO,IAAO,IAAIQ,WAAzD,mBAAKG,EAAL,KAAcC,EAAd,KACA,EAAsBL,mBAASL,GAA/B,mBAAKW,EAAL,KAAWC,EAAX,KAgCA,OAtBAC,qBAAU,WACR,IAAIC,EAkBJ,OAjBIH,IACFV,EAAOM,EAAU,IAAME,GACvBK,EAAaC,aACV,WACON,EAAU,GACdC,EAAWD,EAAWV,EAAO,KAEb,IAAZU,IACc,IAAZF,EACFS,cAAcF,IAEdJ,EAAW,IACXF,EAAWD,EAAU,OAGxBR,IAEF,kBAAMiB,cAAcF,MACxB,CAACL,EAASF,EAASR,EAAMY,EAAMV,IAGlC,sBAAKgB,UAAU,YAAf,UACI,qBAAKA,UAAU,OAAf,SAAmC,IAAZV,GAA6B,IAAZE,EAAgB,gDAAmBP,OAAoB,mCAAMK,EAAN,IAAgBE,EAAU,GAAV,WAAoBA,GAAYA,OAC/I,wBAAQQ,UAAU,aAAaC,QAlCtB,WACbN,GAAQ,SAACD,GAAD,OAAWA,KACfA,EACFP,IAEAD,KA6BE,SAAiDQ,EAAO,OAAS,cCvB5DQ,MAhBf,WACE,OACE,mCACE,cAAC,EAAD,CACArB,KAAM,IACNC,KAAM,IACNC,WAAW,EACXC,OAAQ,SAACH,GAAD,OAAUsB,QAAQC,IAAI,0FAAsBvB,IACpDI,UAAW,kBAAMkB,QAAQC,IAAI,6DAC7BlB,YAAa,kBAAMiB,QAAQC,IAAI,2FAC/BjB,YAAa,kBAAMgB,QAAQC,IAAI,2FCTrCC,IAASC,OAAQ,cAAC,EAAD,IAASC,SAASC,eAAe,U","file":"static/js/main.84085613.chunk.js","sourcesContent":["import React from \"react\";\nimport { useState } from 'react';\nimport { useEffect } from 'react';\n\n\nconst Timer = ({time, step, autostart, onTick, onTimeEnd, onTimeStart, onTimePause}) => { \n    let [minutes, setMinutes] = useState(+(time / 1000 / 60).toFixed());\n    let [seconds, setSeconds] = useState(+(time / 1000 % 60).toFixed());\n    let [stop, setStop] = useState(autostart);\n    const button = () => {\n      setStop((stop) => !stop);\n      if (stop) {\n        onTimePause();\n      } else {\n        onTimeStart();\n      }\n    }\n\n    useEffect(() => {\n      let myInterval;\n      if (stop) {\n        onTick(minutes + \":\" + seconds);\n        myInterval = setInterval(\n           () => {\n              if (seconds > 0) {\n              setSeconds(seconds - (step / 1000));\n              }\n              if (seconds === 0) {\n                if (minutes === 0) {\n                  clearInterval(myInterval);\n                } else {\n                  setSeconds(59);\n                  setMinutes(minutes - 1);\n                  }\n              } \n            }, step );\n      }\n      return () => clearInterval(myInterval);\n      }, [seconds, minutes, step, stop, onTick]);\n\n    return(\n      <div className=\"container\">\n          <div className=\"time\">{minutes === 0 && seconds === 0 ? <h1>Time is over! {onTimeEnd()}</h1> : <h1> {minutes}:{seconds < 10 ?  `0${seconds}` : seconds}</h1>}</div>\n          <button className=\"toggle_btn\" onClick={button}>{stop ? 'Stop' : 'Start'}</button>\n      </div>\n    )\n}\n\nexport default Timer;","import './App.css';\nimport React from 'react';\nimport Timer from './components/Timer';\n\nfunction App() {\n  return (\n    <>  \n      <Timer \n      time={100000} \n      step={1000} \n      autostart={true} \n      onTick={(time) => console.log(\"Залишилось часу: \" + time)}\n      onTimeEnd={() => console.log(\"Час вийшов!\")} \n      onTimeStart={() => console.log(\"Таймер запущено!\")}\n      onTimePause={() => console.log(\"Таймер на паузі!\")}\n      />  \n    </>\n  );\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render( <App />, document.getElementById('root'));"],"sourceRoot":""}