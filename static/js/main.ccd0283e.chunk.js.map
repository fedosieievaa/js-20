{"version":3,"sources":["components/Timer.jsx","App.jsx","index.jsx"],"names":["Timer","time","step","autostart","onTick","onTimeEnd","onTimeStart","onTimePause","useState","toFixed","minutes","setMinutes","seconds","setSeconds","stop","setStop","useEffect","myInterval","setInterval","clearInterval","onClick","App","console","log","ReactDOM","render","document","getElementById"],"mappings":"uLAsDeA,EAlDD,SAAC,GAA0E,IAAzEC,EAAwE,EAAxEA,KAAMC,EAAkE,EAAlEA,KAAMC,EAA4D,EAA5DA,UAAWC,EAAiD,EAAjDA,OAAQC,EAAyC,EAAzCA,UAAWC,EAA8B,EAA9BA,YAAaC,EAAiB,EAAjBA,YAEnE,EAA4BC,qBAAYP,EAAO,IAAQ,IAAIQ,WAA3D,mBAAKC,EAAL,KAAcC,EAAd,KACA,EAA4BH,qBAAYP,EAAO,IAAQ,IAAIQ,WAA3D,mBAAKG,EAAL,KAAcC,EAAd,KACA,EAAsBL,mBAASL,GAA/B,mBAAKW,EAAL,KAAWC,EAAX,KAqCJ,OA1BIC,qBAAU,WACJ,IAAIC,EAqBV,OApBUH,IACFV,EAAOM,EAAU,IAAME,GAEvBK,EAAaC,aACX,WACQN,EAAU,GACVC,EAAWD,EAAWV,EAAK,KAEf,IAAZU,IACgB,IAAZF,EAEFS,cAAcF,IAEZN,EAAWD,EAAU,GACrBG,EAAW,QAGpBX,IAGN,WACLiB,cAAcF,MAEf,CAACL,EAASF,EAASR,EAAMY,EAAMV,IAEpC,gCACI,8BAAkB,IAAZM,GAA6B,IAAZE,EAAgB,gDAAmBP,OAAoB,mCAAMK,EAAN,IAAgBE,EAAU,GAAV,WAAoBA,GAAYA,OAC9H,wBAAQQ,QAtCO,WACbL,GAAQ,SAACD,GAAD,OAASA,KACbA,EACFP,IAEAD,KAiCJ,SAA0BQ,EAAO,OAAS,cC5B/BO,MAhBf,WACE,OACE,mCACE,cAAC,EAAD,CACApB,KAAM,IACNC,KAAM,IACNC,WAAW,EACXC,OAAQ,SAACH,GAAD,OAAUqB,QAAQC,IAAI,0FAAsBtB,IACpDI,UAAW,kBAAMiB,QAAQC,IAAI,6DAC7BjB,YAAa,kBAAMgB,QAAQC,IAAI,2FAC/BhB,YAAa,kBAAMe,QAAQC,IAAI,2FCTrCC,IAASC,OAAQ,cAAC,EAAD,IAASC,SAASC,eAAe,U","file":"static/js/main.ccd0283e.chunk.js","sourcesContent":["import React from \"react\";\nimport { useState } from 'react';\nimport { useEffect } from 'react';\n\nconst Timer = ({time, step, autostart, onTick, onTimeEnd, onTimeStart, onTimePause}) => {\n    \n    let [minutes, setMinutes] = useState(+((time / 1000) / 60).toFixed());\n    let [seconds, setSeconds] = useState(+((time / 1000) % 60).toFixed());\n    let [stop, setStop] = useState(autostart);\n\n    const button = () =>{\n      setStop((stop)=>!stop)\n      if (stop){\n        onTimePause()\n      }else{\n        onTimeStart()\n      }\n    }\n\n    useEffect(() => {\n          let myInterval;\n          if (stop) {\n            onTick(minutes + \":\" + seconds);\n            \n            myInterval = setInterval(\n              () => {\n                  if (seconds > 0) {\n                      setSeconds(seconds - (step/1000));\n                  }\n                  if (seconds === 0) {\n                      if (minutes === 0) {\n                \n                        clearInterval(myInterval);\n                      } else {\n                          setMinutes(minutes - 1);\n                          setSeconds(59);\n                      }\n                  } \n              }, step );\n        }\n\n    return () => {\n      clearInterval(myInterval);\n    };\n  }, [seconds, minutes, step, stop, onTick]);\nreturn(\n<div>\n    <div>{minutes === 0 && seconds === 0 ? <h1>Time is over! {onTimeEnd()}</h1> : <h1> {minutes}:{seconds < 10 ?  `0${seconds}` : seconds}</h1>}</div>\n    <button onClick={button}>{stop ? 'Stop' : 'Start'}</button>\n</div>\n)\n\n}\n\nexport default Timer;","import './App.css';\nimport React from 'react';\nimport Timer from './components/Timer';\n\nfunction App() {\n  return (\n    <>  \n      <Timer \n      time={60000} \n      step={1000} \n      autostart={true} \n      onTick={(time) => console.log(\"Залишилось часу: \" + time)}\n      onTimeEnd={() => console.log(\"Час вийшов!\")} \n      onTimeStart={() => console.log(\"Таймер запущено!\")}\n      onTimePause={() => console.log(\"Таймер на паузі!\")}\n      />  \n    </>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render( <App />, document.getElementById('root'));"],"sourceRoot":""}